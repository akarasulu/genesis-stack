#
# Presumes one RAID set composed of equal drives and zero or more UNEQAUL 
# drives NOT suitable for RAID exists on the system.
# 
# This configuration is a common storage server configuration. Usually one 
# drive (might be an SSD, or HDD) is the boot drive and system volume group
# while the one RAID set is used for data. 
#
# This can get flipped on its head though with a small raid for the system
# volume group and a large HDD for the data in which case we really have a
# compute node.
#
# 1. the primary boot drive may be on the sys or data drive (must be checked)
# 2. the boot partition might be on one of the raid set drives
# 3. the sys and data volume groups may share the RAID if there are no other
#    spare non-raid drives

# Expected Variables (exp_)
# --------------------------
#
# boot_size 
# boot_drive
#
# exp_other_drive
# exp_other_drive_sizes
#
# exp_total_drive_count=2
#
# exp_md0_drive_set
# exp_md0_drives
# exp_md0_drive_count
# exp_md0_drive_sizes (in MB)
# 

debug_step postinst_parts_one_raid_set_checks

if [ "$md0" == "no" ]; then
  err "Was expecting one raid sets. Something is wrong!"
  debug_step postinst_parts_one_raid_set_finish
  exit 1
fi

# These are the actual values found
act_md0_drive_count=0
act_md0_drive_sizes=0
act_md0_drives=''
act_total_drive_count=0

other_drive=''
other_drive_size=0

ds_file="$(mktemp)"
drive_sets > "$ds_file"
debug `drive_sets`

while read drive_sizes drive_count drives ; do
  if [ $drive_count -gt 1 ]; then
    act_md0_drive_count="$drive_count"
    act_md0_drive_sizes="$drive_sizes"
    act_md0_drives="$(echo $drives | sed -e 's/,/ /g')"
    act_total_drive_count=$((act_total_drive_count + drive_count))
  elif [ $drive_count -eq 1 ]; then
    other_drive="$drives"
    other_drive_size="$drive_sizes"
    act_total_drive_count=$((act_total_drive_count + 1))
  fi
done < "$ds_file"

debug "act_md0_drive_count = $act_md0_drive_count"
debug "act_md0_drive_sizes = $act_md0_drive_sizes"
debug "act_md0_drives = $act_md0_drives"

debug "exp_other_drive = $exp_other_drive"
debug "exp_other_drive_size = $exp_other_drive_size"

debug "other_drive = $other_drive"
debug "other_drive_size = $other_drive_size"

if [ $act_md0_drive_count -lt 2 ]; then
  err "Could not find a drive set containing more than two drives."
  debug_step postinst_parts_one_raid_set_finish
  exit 2
fi

#
# Error checking
#

debug "Checking total drive counts ..."
debug "exp_total_drive_count = $exp_total_drive_count"
debug "act_total_drive_count = $act_total_drive_count"

if [ $exp_total_drive_count -ne $act_total_drive_count ]; then
  err "The drive counts do not match!"
  err "Encountered $act_total_drive_count drives, but expected $exp_total_drive_count"
  debug_step postinst_parts_one_raid_set_finish
  exit 2
else 
  info "The expected total drive count matches the actual: $act_total_drive_count"
fi

debug "Checking RAID drive counts ..."
if [ $exp_md0_drive_count -ne $act_md0_drive_count ]; then
  err "The md0 drive counts do not match!"
  err "Encountered $act_md0_drive_count drives, but expected $exp_md0_drive_count"
  debug_step postinst_parts_one_raid_set_finish
  exit 3
else 
  info "The expected and actual raid set drive counts for md0 match: $act_md0_drive_count"
fi

debug "Checking drive sizes ..."
if [ $exp_md0_drive_sizes -ne $act_md0_drive_sizes ]; then
  warn "The md0 drive sizes do not match!"
  warn "Encountered $act_md0_drive_sizes drive sizes, but expected $exp_md0_drive_sizes"
  difference=$(size_difference $exp_md0_drive_sizes $act_md0_drive_sizes)
  if [ $difference -lt 5 ]; then
    warn "Size difference $difference < 5% proceeding forward..."
  else 
    err "Size difference $difference > 5% aborting!"
    debug_step postinst_parts_one_raid_set_finish
    exit 4
  fi
else
  info "The expected md0 sizes match the actual: $act_md0_drive_sizes M"
fi

#
# Partition and Create Raid Devices
#

prep_boot_drive
next_part="$(cat /tmp/next_part)"
debug "next_part = $next_part"
debug "boot_drive = $boot_drive"

debug_step postinst_parts_one_raid_set_create_raidset

boot_drive_in_raidset="$(echo $act_md0_drives | grep -o $boot_drive)"
debug "boot_drive_in_raidset = $boot_drive_in_raidset"

md0_raid_devs=''
if [ -n "$boot_drive_in_raidset" ]; then
  for d in $act_md0_drives; do
    if [ "$d" == "$boot_drive" ]; then
      fdisk_raid $d$next_part
    else
      fdisk_gpt $d
      fdisk_raid $d$next_part
    fi
    md0_raid_devs="$md0_raid_devs /dev/$d$next_part"
  done
else 
  for d in $act_md0_drives; do
    fdisk_gpt $d
    fdisk_raid $d'1'
    md0_raid_devs="$md0_raid_devs /dev/$d"'1'
  done
fi

level="$(echo $md0 | sed -e 's/^rl//')"
info "Creating RAID Level $level md0 device"
echo yes | mdadm --create /dev/md0 --level=$level --raid-devices=$act_md0_drive_count $md0_raid_devs

md0_size=0
if [ $level -eq 0 ]; then
  md0_size=$(($act_md0_drive_count * $act_md0_drive_sizes))
elif [ $level -eq 1 -o $level -eq 10 ]; then
  md0_size=$(($act_md0_drive_count * $act_md0_drive_sizes / 2))
elif [ $level -eq 5 ]; then
  md0_size=$(( ( $act_md0_drive_count - 1 ) * $act_md0_drive_sizes ))
else 
  err "Unrecognized RAID level $level. Aborting..."
  debug_step postinst_parts_one_raid_set_finish
  exit 5
fi

#
# Create PV, and VG
#

debug_step postinst_parts_one_raid_set_create_pvvglvm

debug "ratio = $ratio"
debug "next_part = $next_part"

# Sys and data may be shared on md0
if [ "$ratio" != "na" -a "$sys" == "md0" -a "$data" == "md0" ]; then
  debug "System and data partitions are shared on the same raid, other device not available for boot"

  fdisk_gpt /dev/md0
  sys_size=$(calc_sys_size $ratio $md0_size)
  fdisk_lvm_p1 /dev/md0 $sys_size'M'
  fdisk_lvm_p2 /dev/md0
  
  # System VG
  pvcreate -f -y /dev/md0p0
  vgcreate sys /dev/md0p0

  # Data VG
  pvcreate -f -y /dev/md0p1
  vgcreate data /dev/md0p1
elif [ $other_drive_size -lt $act_md0_drive_sizes -a "$boot_drive" == "$other_drive" ]; then
  debug "Using the other SSD drive $other_drive for boot and the system volume group"

  # other drive is SSD with has the boot partition, md0 is on HDD
  fdisk_lvm "/dev/$other_drive""$next_part"

  # System VG on SSD Partition (other single drive)
  pvcreate -f -y "/dev/$other_drive""$next_part"
  vgcreate sys "/dev/$other_drive""$next_part"

  # Data VG on RAID
  pvcreate -f -y /dev/md0
  vgcreate data /dev/md0
elif [ $other_drive_size -gt $act_md0_drive_sizes -a "$boot_drive" == "$other_drive" ]; then
  debug "Using the other drive HDD $other_drive for boot and the data volume group"

  # Other drive is an HDD and the boot partition is on it, md0 is probably on SSD
  fdisk_lvm /dev/$other_drive$next_part

  pvcreate -f -y /dev/$other_drive$next_part
  vgcreate data /dev/$other_drive$next_part

  pvcreate -f -y /dev/md0
  vgcreate sys /dev/md0
elif [ "$boot_drive" != "$other_drive" -a -n "$boot_drive_in_raidset" ]; then
  fdisk_gpt /dev/$other_drive
  fdisk_lvm /dev/$other_drive

  if [ $other_drive_size -gt $act_md0_drive_sizes ]; then 
     pvcreate -f -y /dev/$other_drive'1'
     vgcreate data  /dev/$other_drive'1'
     
     # System VG on SSD RAID
     pvcreate -f -y /dev/md0
     vgcreate sys /dev/md0
  else 
     pvcreate -f -y /dev/$other_drive'1'
     vgcreate sys  /dev/$other_drive'1'
     
     # Data VG on SSD RAID
     pvcreate -f -y /dev/md0
     vgcreate data /dev/md0
  fi
else
  err "This drive configuration was not caught by our logic!"
  err "Could not determine how to create volume groups. Aborting."
  exit 6;
fi

debug_step postinst_parts_one_raid_set_finish
