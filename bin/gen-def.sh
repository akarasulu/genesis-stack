#!/bin/bash

. ./libs/funcs  # import functions
PROGS='dmidecode lshw parted googler' # programs needed to do this
THRESHOLD=5  # ratio threshold of hdd to sdd counts to determine type

function usage_info() {
    echo "Generates a machine documentation and a database to generate a specific"
    echo "Debian installer for a machine type. Must run on one of the machines of"
    echo "the target type."
    echo
    echo "mkpvms <category> <type>"
    echo
    echo "       type = [1-9][0-9]+"
    echo "   category = \"compute\" | \"storage\""
    echo
    echo "How to use it:"
    echo "  1. Boot up the machine via a Ubuntu 16.04.3 Desktop Live CD"
    echo "  2. Check out this repository from GitHub"
    echo "  3. Run this script to generate your machine type directory"
    echo "  4. Commit the generated directory and its contents"
    echo
    echo "The ISO will be automatically generated by the build system."
}

# Check for arguments provide useage
if [ -z "$1" ]; then
  echo "[ERROR] Insufficient arguments: no category parameter."
  usage_info
  exit -1
else
  case "$1" in
    "compute")
        ;;
    "storage")
        ;;
    *)
        echo "[ERROR] $1 is not a valid category value."
        usage_info
        exit -1
        ;;
  esac
fi

if [ -z "$2" ]; then
  echo "[ERROR] Insufficient arguments: no type number provided."
  usage_info
  exit -1
elif [ -z "`echo $2 | egrep '^[1-9][0-9]*$'`" ]; then
  echo "[ERROR] $2 is not a proper type number"
  usage_info
  exit -1
fi

CATEGORY="$1"
TYPE="$2"
FOLDER='pvms-'$CATEGORY'-t'$TYPE

if [ -d $FOLDER ]; then
    echo_err "The folder $FOLDER already exists, existing."
    exit 1
else
    mkdir $FOLDER
fi

readme="$FOLDER/Readme.md"
ssddb="$FOLDER/ssds.db"
hdddb="$FOLDER/hdds.db"
nicdb="$FOLDER/nics.db"
macdb="$FOLDER/mach.db"

# Check progs exist
if [ -z "`which googler`" ]; then
    # DL and inst Googler
    wget http://ftp.us.debian.org/debian/pool/main/g/googler/googler_3.4.0-1_all.deb
    dpkg -i ./googler_3.4.0-1_all.deb
fi

for prog in $PROGS; do
    if [ -z "`which $prog`" ]; then
        echo "Can not do my thang without $prog on this system."
    fi
done

# Extract Disk information
ssd_drives=()
hdd_drives=()
for drive in `ata_drives`; do
    dev=$(basename $drive)
    if [ "`bus_type $dev`" == "usb" ]; then
        echo "Skipping USB drive $dev"
        continue
    fi

    if [ "`is_hdd $dev`" == "true" ]; then
        hdd_drives+=($dev)
    else
        ssd_drives+=($dev)
    fi
done

# Extract RAM and Processor information
ramkb=`grep MemTotal /proc/meminfo | awk '{print $2}'`
rammb=$(($ramkb / 1024))

cpus=`lscpu | grep '^CPU(s):' | awk '{print $2}'`
cpus=`trim $cpus`

echo "cpus: $cpus"  > $macdb
echo "ram: $rammb" >> $macdb

arch=`lscpu | grep 'Architecture:' | awk -F':' '{print $2}'`
arch=`trim $arch`

model=`lscpu | grep 'Model name:' | awk -F':' '{print $2}'`
model=`trim $model`

virtualization=`lscpu | grep 'Virtualization:' | awk -F':' '{print $2}'`
virtualization=`trim $virtualization`

if [ -z "$virtualization" ]; then
    echo_err "This machine does not support virtualization!"
    exit 1
elif [ "$virtualization" != "VT-x" -a "$virtualization" != "AMD-V" ]; then 
    echo_err "Unidentified virtualization feature: $virtualization"
    exit 1
fi

# Writing out to $readme
echo "# PVMS $CATEGORY Type-$TYPE"                       > $readme
echo                                                    >> $readme
echo "- Model          : $model"                        >> $readme
echo "- CPU Cores      : $cpus"                         >> $readme
echo "- Architecture   : $arch"                         >> $readme
echo "- RAM            : $rammb MB"                     >> $readme
echo "- Virtualization : $virtualization"               >> $readme
echo                                                    >> $readme
echo "We have ? of these machines:"                     >> $readme
echo                                                    >> $readme
echo '- **OD-???***'                                    >> $readme
echo '- **OD-???***'                                    >> $readme
echo                                                    >> $readme
echo '## Disks'                                         >> $readme
echo                                                    >> $readme

# Solid State Disks First
if [ ${#ssd_drives[@]} -eq 1 ]; then
    echo '### 1x Solid State Drive'                     >> $readme
    echo                                                >> $readme
elif [ ${#ssd_drives[@]} -gt 1 ]; then
    echo '### '${#ssd_drives[@]}'x Solid State Drives'  >> $readme
    echo                                                >> $readme
fi

rm -f $ssddb
for ssd in ${ssd_drives[@]}; do
    rec=`parted -m /dev/$ssd print | grep $ssd | sed -e 's/:;//' -e 's/\/dev\///'`
    IFS=':' read -r -a props <<< "$rec"
    capacity=$(in_mb ${props[1]})
    vendor=`get_vendor "${props[6]}"`
    model=`get_model "${props[6]}"`
    IFS=' ' read -r -a family_series <<< "`drive_family_series $vendor $model`"
    family="${family_series[0]}"
    series="${family_series[1]}"
    link=`drive_datasheet $vendor $model`

    echo '#### '$ssd                                   >> $readme
    echo                                               >> $readme
    echo '```shell'                                    >> $readme
    echo `dev_path $ssd`                               >> $readme
    echo '```'                                         >> $readme
    echo                                               >> $readme
    echo '- Type      : SSD'                           >> $readme
    echo '- Interface : SATA'                          >> $readme
    echo '- Vendor    : '$vendor                       >> $readme
    echo '- Family    : '$family                       >> $readme
    echo '- Series    : '$series                       >> $readme
    echo '- Model     : ['$model']('$link')'           >> $readme
    echo '- Capacity  : '$capacity                     >> $readme
    echo                                               >> $readme
    echo $ssd'|'$vendor'|'$family'|'$model'|'$capacity >> $ssddb
done

# Hard Disk Drives Second
if [ ${#hdd_drives[@]} -eq 1 ]; then
    echo '### 1x Hard Disk Drive'                      >> $readme
    echo                                               >> $readme
elif [ ${#hdd_drives[@]} -gt 1 ]; then
    echo '### '${#hdd_drives[@]}'x Hard Disk Drives'   >> $readme
    echo                                               >> $readme
fi

rm -f $hdddb
for hdd in ${hdd_drives[@]}; do
    rec=`parted -m /dev/$hdd print | grep $hdd | sed -e 's/:;//' -e 's/\/dev\///'`
    IFS=':' read -r -a props <<< "$rec"
    capacity=$(in_mb ${props[1]})
    vendor=`get_vendor "${props[6]}"`
    model=`get_model "${props[6]}"`
    IFS=' ' read -r -a family_series <<< "`drive_family_series $vendor $model`"
    family="${family_series[0]}"
    series="${family_series[1]}"
    link=`drive_datasheet $vendor $model`

    echo '#### '$hdd                                   >> $readme
    echo                                               >> $readme
    echo '```shell'                                    >> $readme
    echo `dev_path $hdd`                               >> $readme
    echo '```'                                         >> $readme
    echo                                               >> $readme
    echo '- Type      : SSD'                           >> $readme
    echo '- Interface : SATA'                          >> $readme
    echo '- Vendor    : '$vendor                       >> $readme
    echo '- Family    : '$family                       >> $readme
    echo '- Series    : '$series                       >> $readme
    echo '- Model     : ['$model']('$link')'           >> $readme
    echo '- Capacity  : '$capacity                     >> $readme
    echo                                               >> $readme
    echo $hdd'|'$vendor'|'$family'|'$model'|'$capacity >> $hdddb
done

# Extract CPU Information

# Stop if virtualization is not supported

dmi_processor "$FOLDER"
cpu_info "$FOLDER"

echo '## CPU Information'                              >> $readme
echo                                                   >> $readme
echo '```yaml'                                         >> $readme
lscpu                                                  >> $readme
echo '```'                                             >> $readme
echo                                                   >> $readme
echo '### dmidecode output'                            >> $readme
echo                                                   >> $readme
echo '```yaml'                                         >> $readme
cat "$FOLDER/dmi_processor.txt"                        >> $readme
echo '```'                                             >> $readme
echo                                                   >> $readme
echo '### /proc/cpuinfo'                               >> $readme
echo                                                   >> $readme
echo '```yaml'                                         >> $readme
cat "$FOLDER/cpu_info.txt"                             >> $readme
echo '```'                                             >> $readme
echo                                                   >> $readme

rm -f "$FOLDER/cpu_info.txt"
rm -f "$FOLDER/dmi_processor.txt"

# Extract Network Information
# cat asdfsadf > $nicdb
lshw -businfo -class network | grep network |  \
    awk '{print $2"|"$1"|"$4}'                         >> $nicdb
nics=`lshw -businfo -class network | grep network | wc | awk '{print $1}'`

echo '## NIC Information'                              >> $readme
echo                                                   >> $readme
echo "This machine has $nics network interfaces:"      >> $readme
echo                                                   >> $readme
echo '```yaml'                                         >> $readme
lshw -businfo -class network                           >> $readme
echo '```'                                             >> $readme
echo                                                   >> $readme
echo "More details are available in the full output:"  >> $readme
echo                                                   >> $readme
echo '```yaml'                                         >> $readme
lshw -class network                                    >> $readme
echo '```'                                             >> $readme
echo                                                   >> $readme
