
# Pull in file system information which looks like
#
# name: root
# mountPoint: /
# type: ext4
# size: 8192
#

debug_step postinst_lvfs_create

# For new use this temporary new one
fstab='/mnt/root/etc/fstab.new'

# Cat out parts of the original into the new
fstab_ori='/mnt/root/etc/fstab'
echo "/dev/mapper/sys-root / ext4 errors=remount-ro 0 1" > "$fstab"
cat "$fstab_ori" | grep '/boot'                         >> "$fstab"
cat "$fstab_ori" | grep 'sr0'                           >> "$fstab"

# Remove old original, copy new over and change pointer to file
rm  "$fstab_ori"
mv  "$fstab" "$fstab_ori"
fstab="$fstab_ori"

file_systems="$base_dir/file-systems.yml"
records=$(count "$file_systems")

ii=0
while [ $ii -lt $records ]; do
  rec $ii "$file_systems"

  debug_step postinst_lvfs_create_$name "name=$name, mountPoint=$mountPoint, type=$type, vg=$vg, size=$size, rec=$ii"
  
  if [ "$name" == "swap" ]; then
    info "Creating the swap logical volume"
    act_size=$size

    if [ -n "$(echo $size | grep %)" ]; then
      act_size="$(echo $size | sed -e 's/%//')"

      mem=$(grep MemTotal: /proc/meminfo | sed -e 's/ //g' -e 's/kB//' | cut -d':' -f2)
      mem=$((mem / 1024))
      act_size=$((act_size / 100 * mem))

      info "Using percent specifier ($size) for swap size"
      info "Using $act_size M for swap with a memory capacity of $mem"' M'
    else
      info "Using amount specifier ($size) for swap logical volume size"
    fi

    lvcreate -y -n swap -L $act_size $vg
    mkswap /dev/sys/swap
    echo "/dev/mapper/$vg-swap none swap sw 0 0" >> "$fstab"
  elif [ "$name" == "boot" ]; then
    info "Skipping boot because it has already created by DI"
  else
    lvcreate -n "$name" -L "$size"'M' "$vg"

    if [ "$name" == "vm" ]; then
      mkfs."$type" -F -F -L "$name" -T huge "/dev/$vg/$name"
    else
      mkfs."$type" -F -F -L "$name" "/dev/$vg/$name"
    fi

    src="/mnt/root$mountPoint"
    dst="/target$mountPoint"
    mkdir -p "$dst" 
    mkdir -p "$src"

    mount "/dev/$vg/$name" "$dst"

    if [ "$name" == "opt" -o "$name" == "usr" ]; then
      mkdir -p "$dst/local" 
    fi

    # We handle others first, then root last after this loop
    if [ "$name" != "root" ]; then
      cd $src
      tar cf - . | (cd "$dst" && tar xf -)

      if [ "$DEBUG" != 'enabled' ]; then
        cd /
        rm -rf "$src"
        sync
      fi

      umount -l "$dst"

      # Add entries into fstab
      echo "/dev/mapper/$vg-$name $mountPoint $type defaults 0 2" >> "$fstab"
    fi
  fi

  ii=$((ii + 1))
done

debug_step postinst_lvfs_restore_root

# Without all the other partitions backup the root the tar
# command on DI does not have the single file system option
cd /mnt/root
tar cf - . | (cd /target && tar xf -)

debug_step postinst_lvfs_cleanup

## Cleanup and umount USB
if [ "$DEBUG" != 'enabled' ]; then
  cd /
  rm -rf /mnt/root
  sync; sync; sync
  umount -l /mnt
fi

# Now we have to install grub because the root partition changed
# let's make sure also that we mount and check all the filesystems
# We will have to use in-target to properly install grub with the
# new disk configuraiton.

debug_step postinst_mount

ii=0
while [ $ii -lt $records ]; do
  rec $ii "$file_systems"
  info "name=$name, mountPoint=$mountPoint, type=$type, vg=$vg, size=$size, rec=$ii"

  if [ "$name" == "swap" ]; then
    info "skipping swap, no mount point"
  elif [ "$name" == "root" ]; then
    info "skipping root, already mounted on /target"
  elif [ "$name" == "boot" ]; then
    dst="/target$mountPoint"
    result=$(cut -d' ' -f2 /proc/mounts | grep "^$dst\$")
    
    if [ -n "$result" ]; then
      info "skipping $name, already mounted"
    else
      info "mounting $name on $dst"
      mount "$boot_part" "$dst"
    fi
  else
    dst="/target$mountPoint"
    result=$(cut -d' ' -f2 /proc/mounts | grep "^$dst\$")
    
    if [ -n "$result" ]; then
      info "skipping $name, already mounted"
    else
      info "mounting $name on $dst"
      mount "/dev/$vg/$name" "$dst"
    fi
  fi
  ii=$((ii + 1))
done

debug_step postinst_grub_prep

mkdir -p /target/proc
mount --bind /proc /target/proc
mount --bind /dev  /target/dev
mount --bind /sys  /target/sys

mdadm --detail --scan >> /target/etc/mdadm/mdadm.conf
echo "RESUME=/dev/mapper/sys-swap" > /target/etc/initramfs-tools/conf.d/resume
echo 'GRUB_CMDLINE_LINUX="root=/dev/mapper/sys-root"' >> /target/etc/default/grub

debug_step postinst_grub

chroot /target update-initramfs -u
chroot /target update-grub2

debug_step postinst_lvfs_finish
