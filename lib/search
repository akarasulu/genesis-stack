#!/bin/sh

. ./general

#
# Search Functions
#

drive_words='desktop,solid,state,ssd,series,digital,product,size,model,pro,iii,bare,buy,cache,hard,item,mtc,scan,internal,external,drive,hdd,sdd,storage,bay,bios,rpm,sata,technology,rate,nas,oem,pc,amazon,'
stop_words='a,able,about,across,after,all,almost,also,am,among,an,and,any,are,as,at,be,because,been,but,by,can,cannot,could,dear,did,do,does,either,else,ever,every,for,from,get,got,had,has,have,he,her,hers,him,his,how,however,i,if,in,into,is,it,its,just,least,let,like,likely,may,me,might,most,must,my,neither,no,nor,not,of,off,often,on,only,or,other,our,own,rather,said,say,says,she,should,since,so,some,than,that,the,their,them,then,there,these,they,this,tis,to,too,twas,us,wants,was,we,were,what,when,where,which,while,who,whom,why,will,with,would,yet,you,your'
avoid_words=$stop_words','$drive_words

# ARGS: $1 - drive vendor
# ARGS: $2 - drive model
# OUTPUTS: returns first matching URL of a PDF file from the vendor
search_drive_datasheet () {
    urls=`googler --json $1 $2 datasheet | grep url | cut -d ' ' -f 2 | sed -e 's/^"//' -e 's/"$//'`
    for url in $urls; do
        if [ -n "`echo $url | grep -i .pdf | grep -i $vendor'.com'`" ]; then
            echo $url
            return
        fi
    done
}

# ARGS: $1 - drive vendor
# ARGS: $2 - drive model
# OUTPUTS: family <space> series, if they exist
search_drive_family () {
    local vendor="$1"
    local model="$2"
    local names=`googler --json buy "$vendor" "$model"      \
     | grep -oP "\w*[A-Z]+\w*"                              \
     | tr '[:upper:]' '[:lower:]'                           \
     | grep '^[a-z]' | sort`
    
    local histfile=`mktemp`
    for name in $names; do 
        if [ -z "`echo $avoid_words | grep $name`" ]; then 
            echo $name;
        fi; 
    done | uniq -c | grep -v -i "$vendor" | grep -v -i "$model" | sort -g -r > $histfile

    local prevfreq=-1
    local prevword=''
    local words=()
    while read line; do
        freq=`echo $line | cut -d ' ' -f 1`
        word=`echo $line | cut -d ' ' -f 2`

        if [ $prevfreq -eq -1 ]; then
            prevfreq=$freq
            prevword=$word
            words+=($word)
        elif [ $(($prevfreq / $freq)) -lt 2 ]; then
            words+=($word)
        fi
    done < $histfile
    rm $histfile

    # the series is closer to the model so it is more common if there is 
    # one at all, that's why we send back family series in this order
    if [ ${#words[@]} -gt 1 ]; then
        echo "${words[1]} ${words[0]}"
    else
        echo "${words[0]} ${words[0]}"
    fi
}

# ARGS: $1 - simple device name after /dev/: i.e. sda
# OUTPUTS: [true|false] as a string
search_is_hdd () {
    local dev="$1"
    local type=`bus_type $dev`
    local desc=`lshw -businfo -class disk | grep $dev | \
         cut -d ' ' -f 4,5,6 | egrep '[a-z]|[A-Z]|[0-9]+'`

    if [ -z "$desc" ]; then # -o "$type" == "usb" ]; then
        echo "false no desc"
        return
    fi

    # SSD might show rotational to 1, but HDD never will show 0
    if [ "`cat /sys/block/$dev/queue/rotational`" == "0" ]; then
        echo "false"
        return
    fi

    # If it says it's rotational then check with google for no ssd references
    local ssd_hits=`googler -n 100 --json $desc | grep -i ssd | wc | cut -d ' ' -f 1`
    local hdd_hits=`googler -n 100 --json $desc | grep -i hdd | wc | cut -d ' ' -f 1`
    local ratio=$(($hdd_hits / $ssd_hits))

    if [ $ratio -gt $THRESHOLD ]; then
        echo "true"
    else 
        echo "false"
    fi
}

