#!/bin/sh

# ARGS: none
# OUTPUT: the default gateway's ip address
default_gw () {
  ip route show | grep default | cut -d ' ' -f 3
}

# ARGS: none
# OUTPUT: the device of the default gateway (i.e. br0)
default_gw_dev () {
  ip route show | grep default | cut -d ' ' -f 5
}

# ARGS: none
# OUTPUT: the ip address of the nic using the default gateway
default_gw_dev_ip () {
  ip addr show `default_gw_dev` | \
    egrep '^[[:space:]]+inet[[:space:]]+' | \
    egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | \
    cut -d$'\n' -f 1
}

# ARGS: none
# OUTPUT: the broadcast address of the nic using the default gateway
default_gw_dev_broadcast () {
  ip addr show `default_gw_dev` | \
    egrep '^[[:space:]]+inet[[:space:]]+' | \
    egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | \
    cut -d$'\n' -f 2
}

# ARGS: none
# OUTPUT: the default gateway device's ip/cidr mask (i.e. 192.168.1.34/24)
default_gw_dev_net_cidr () {
  ip addr show `default_gw_dev` | \
    egrep '^[[:space:]]+inet[[:space:]]+' | \
    egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}'
}

# ARGS: none
# OUTPUT: the cidr mask (i.e. 24)
default_gw_cidr_mask () {
  echo `default_gw_dev_net_cidr` | cut -d '/' -f 2  
}

# ARGS: none
# OUTPUT: the default gateway device's network
default_gw_net () {
  local cidr_mask=`default_gw_cidr_mask`
  local bit_mask=$(cidr2mask "$cidr_mask")
  local ip=$(default_gw_dev_ip)
  netcalc "$ip" "$bit_mask"
}

# ARGS $1: the cidr mask (num bits in mask: 0-31)
# OUTPUT: the octet version of the cidr mask (i.e. 255.255.0.0 for 16)
cidr2mask () {
  local i mask=""
  local full_octets=$(($1/8))
  local partial_octet=$(($1%8))

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
      mask+=255
    elif [ $i -eq $full_octets ]; then
      mask+=$((256 - 2**(8-$partial_octet)))
    else
      mask+=0
    fi  
    test $i -lt 3 && mask+=.
  done

  echo $mask
}

# ARGS $1: the cidr mask (num bits in mask: 1-32)
# OUTPUT: the octet version of the cidr mask (i.e. 255.255.0.0 for 16)
default_gw_mask () {
  cidr2mask `default_gw_cidr_mask`  
}

# ARGS $1: the mask octets (i.e. 255.255.0.0)
# OUTPUT: the cidr number for the mask (i.e. 24 for  255.255.255.0)
mask2cidr () {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7 ; break ;;
            252) let nbits+=6 ; break ;;
            248) let nbits+=5 ; break ;;
            240) let nbits+=4 ; break ;;
            224) let nbits+=3 ; break ;;
            192) let nbits+=2 ; break ;;
            128) let nbits+=1 ; break ;;
            0);;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "$nbits"
}

# ARG $1: ip addr
# ARG $2: net mask
netcalc () {
    local IFS='.' ip i
    local -a oct msk
	
    read -ra oct <<<"$1"
    read -ra msk <<<"$2"

    for i in ${!oct[@]}; do
        ip+=( "$(( oct[i] & msk[i] ))" )
    done
    
    echo "${ip[*]}"
}

# ARG $1: ip addr
# ARG $2: net mask
bcastcalc () {
    local IFS='.' ip i
    local -a oct msk
	
    read -ra oct <<<"$1"
    read -ra msk <<<"$2"

    for i in ${!oct[@]}; do
        ip+=( "$(( oct[i] + ( 255 - ( oct[i] | msk[i] ) ) ))" )
    done

    echo "${ip[*]}"
}


